type Member {
  userId: ID!
  roles: [Role!]!
}

interface IGroupCOre {
  groupId: ID!
  groupName: String!
}

type GroupCore implements IGroupCOre {
  groupId: ID!
  groupName: String!
}

type Group implements IGroupCOre {
  groupId: ID!
  groupGenerationId: Int!
  groupName: String!
  parentGroupId: ID
  path: [GroupCore!]!
  memberCount: Int!
}

input AddGroupCommand {
  currentGenerationId: Int!
  targetGenerationId: Int
  groupName: String!
  parentGroupId: ID!
}

input UpdateGroupCommand {
  currentGenerationId: Int!
  targetGenerationId: Int
  groupId: ID!
  groupName: String!
  parentGroupId: ID!
}

input DeleteGroupCommand {
  currentGenerationId: Int!
  targetGenerationId: Int
  groupId: ID!
}

input GroupMemberCommand {
  currentGenerationId: Int!
  targetGenerationId: Int
  groupId: ID!
  userIds: [ID!]!
  roles: [Role!]!
}

input DeleteGroupMemberCommand {
  currentGenerationId: Int!
  targetGenerationId: Int
  groupId: ID!
  userIds: [ID!]!
}

input SwitchGroupGenerationCommand {
  currentGenerationId: Int!
  nextGenerationId: Int!
}

enum SwitchGroupGenerationResult {
  Success,
  UnrecognizedGenerationChanged,
  UnknownError
}

input ImportGroupGenerationCommand {
  groupGenerationId: Int
  generationFile: Upload!
}

type GroupGeneration {
  groupGenerationId: Int!
  isCurrent: Boolean!
}

type LessonStatistics {
  onGoingCount: Int!
  passCount: Int!
  failCount: Int!
}

type Lesson {
  lessonId: ID!
  groupId: ID!
  slideId: ID!
  group: Group!
  slide: Slide!
  studentCount: Int!
  statistics: LessonStatistics!
}

input AddLessonCommand {
  slideId: ID!
  groupIds: [ID!]!
}
