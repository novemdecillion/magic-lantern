/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables


import io.github.novemdecillion.adapter.jooq.DefaultSchema
import io.github.novemdecillion.adapter.jooq.tables.records.GroupGenerationPeriodRecord

import java.time.LocalDate
import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupGenerationPeriodTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GroupGenerationPeriodRecord>?,
    aliased: Table<GroupGenerationPeriodRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GroupGenerationPeriodRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"group_generation_period\" as  SELECT group_generation.group_generation_id,\n    group_generation.start_date,\n    (lead(group_generation.start_date) OVER (ORDER BY group_generation.start_date) - 1) AS end_date\n   FROM group_generation;")
) {
    companion object {

        /**
         * The reference instance of <code>group_generation_period</code>
         */
        val GROUP_GENERATION_PERIOD = GroupGenerationPeriodTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GroupGenerationPeriodRecord> = GroupGenerationPeriodRecord::class.java

    /**
     * The column <code>group_generation_period.group_generation_id</code>.
     */
    val GROUP_GENERATION_ID: TableField<GroupGenerationPeriodRecord, UUID?> = createField(DSL.name("group_generation_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>group_generation_period.start_date</code>.
     */
    val START_DATE: TableField<GroupGenerationPeriodRecord, LocalDate?> = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>group_generation_period.end_date</code>.
     */
    val END_DATE: TableField<GroupGenerationPeriodRecord, LocalDate?> = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "")

    private constructor(alias: Name, aliased: Table<GroupGenerationPeriodRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GroupGenerationPeriodRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>group_generation_period</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>group_generation_period</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>group_generation_period</code> table reference
     */
    constructor(): this(DSL.name("group_generation_period"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GroupGenerationPeriodRecord>): this(Internal.createPathAlias(child, key), child, key, GROUP_GENERATION_PERIOD, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): GroupGenerationPeriodTable = GroupGenerationPeriodTable(DSL.name(alias), this)
    override fun `as`(alias: Name): GroupGenerationPeriodTable = GroupGenerationPeriodTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GroupGenerationPeriodTable = GroupGenerationPeriodTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GroupGenerationPeriodTable = GroupGenerationPeriodTable(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<UUID?, LocalDate?, LocalDate?> = super.fieldsRow() as Row3<UUID?, LocalDate?, LocalDate?>
}
