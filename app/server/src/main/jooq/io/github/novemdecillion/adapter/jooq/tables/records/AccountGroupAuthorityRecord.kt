/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.records


import io.github.novemdecillion.adapter.jooq.tables.AccountGroupAuthorityTable
import io.github.novemdecillion.adapter.jooq.tables.interfaces.IAccountGroupAuthority
import io.github.novemdecillion.domain.Role

import java.util.UUID

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountGroupAuthorityRecord() : UpdatableRecordImpl<AccountGroupAuthorityRecord>(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY), Record3<UUID?, UUID?, Role?>, IAccountGroupAuthority {

    override var accountId: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    override var groupTransitionId: UUID?
        set(value) = set(1, value)
        get() = get(1) as UUID?

    override var role: Role?
        set(value) = set(2, value)
        get() = get(2) as Role?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record3<UUID?, UUID?, Role?> = super.key() as Record3<UUID?, UUID?, Role?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, UUID?, Role?> = super.fieldsRow() as Row3<UUID?, UUID?, Role?>
    override fun valuesRow(): Row3<UUID?, UUID?, Role?> = super.valuesRow() as Row3<UUID?, UUID?, Role?>
    override fun field1(): Field<UUID?> = AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.ACCOUNT_ID
    override fun field2(): Field<UUID?> = AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.GROUP_TRANSITION_ID
    override fun field3(): Field<Role?> = AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.ROLE
    override fun component1(): UUID? = accountId
    override fun component2(): UUID? = groupTransitionId
    override fun component3(): Role? = role
    override fun value1(): UUID? = accountId
    override fun value2(): UUID? = groupTransitionId
    override fun value3(): Role? = role

    override fun value1(value: UUID?): AccountGroupAuthorityRecord {
        this.accountId = value
        return this
    }

    override fun value2(value: UUID?): AccountGroupAuthorityRecord {
        this.groupTransitionId = value
        return this
    }

    override fun value3(value: Role?): AccountGroupAuthorityRecord {
        this.role = value
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: Role?): AccountGroupAuthorityRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IAccountGroupAuthority) {
        accountId = from.accountId
        groupTransitionId = from.groupTransitionId
        role = from.role
    }

    override fun <E : IAccountGroupAuthority> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised AccountGroupAuthorityRecord
     */
    constructor(accountId: UUID? = null, groupTransitionId: UUID? = null, role: Role? = null): this() {
        this.accountId = accountId
        this.groupTransitionId = groupTransitionId
        this.role = role
    }
}
