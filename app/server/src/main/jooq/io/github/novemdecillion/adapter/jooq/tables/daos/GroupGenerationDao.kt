/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.GroupGenerationTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.GroupGenerationEntity
import io.github.novemdecillion.adapter.jooq.tables.records.GroupGenerationRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupGenerationDao(configuration: Configuration?) : DAOImpl<GroupGenerationRecord, GroupGenerationEntity, Int>(GroupGenerationTable.GROUP_GENERATION, GroupGenerationEntity::class.java, configuration) {

    /**
     * Create a new GroupGenerationDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: GroupGenerationEntity): Int? = o.groupGenerationId

    /**
     * Fetch records that have <code>group_generation_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfGroupGenerationIdTable(lowerInclusive: Int?, upperInclusive: Int?): List<GroupGenerationEntity> = fetchRange(GroupGenerationTable.GROUP_GENERATION.GROUP_GENERATION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>group_generation_id IN (values)</code>
     */
    fun fetchByGroupGenerationIdTable(vararg values: Int): List<GroupGenerationEntity> = fetch(GroupGenerationTable.GROUP_GENERATION.GROUP_GENERATION_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>group_generation_id = value</code>
     */
    fun fetchOneByGroupGenerationIdTable(value: Int): GroupGenerationEntity? = fetchOne(GroupGenerationTable.GROUP_GENERATION.GROUP_GENERATION_ID, value)

    /**
     * Fetch records that have <code>is_current BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfIsCurrentTable(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<GroupGenerationEntity> = fetchRange(GroupGenerationTable.GROUP_GENERATION.IS_CURRENT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>is_current IN (values)</code>
     */
    fun fetchByIsCurrentTable(vararg values: Boolean): List<GroupGenerationEntity> = fetch(GroupGenerationTable.GROUP_GENERATION.IS_CURRENT, *values.toTypedArray())
}
