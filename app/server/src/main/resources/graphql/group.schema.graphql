type Member {
  userId: ID!
  roles: [Role!]!
}

interface IGroupCOre {
  groupId: ID!
  groupName: String!
}

type GroupCore implements IGroupCOre {
  groupId: ID!
  groupName: String!
}

type Group implements IGroupCOre {
  groupId: ID!
  groupOriginId: ID!
  groupGenerationId: ID!
  groupName: String!
  parentGroupId: ID
#  members: [Member!]
#  courses: [ID!]
  path: [GroupCore!]!
}

input AddGroupCommand {
  groupOriginId: ID
  groupGenerationId: ID
  groupName: String!
  parentGroupId: ID!
}

input UpdateGroupCommand {
  groupId: ID!
  groupName: String!
}

input GroupMemberCommand {
  groupId: ID!
  userIds: [ID!]!
  role: [Role!]!
}

input DeleteGroupMemberCommand {
  groupId: ID!
  userIds: [ID!]!
}

type Lesson {
  lessonId: ID!
  groupId: ID!
  slideId: ID!
  group: Group!
  slide: Slide!
}

input AddLessonCommand {
  slideId: ID!
  groupIds: [ID!]!
}
