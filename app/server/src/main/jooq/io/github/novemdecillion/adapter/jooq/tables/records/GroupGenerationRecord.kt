/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.records


import io.github.novemdecillion.adapter.jooq.tables.GroupGenerationTable
import io.github.novemdecillion.adapter.jooq.tables.interfaces.IGroupGeneration

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupGenerationRecord() : UpdatableRecordImpl<GroupGenerationRecord>(GroupGenerationTable.GROUP_GENERATION), Record2<Int?, Boolean?>, IGroupGeneration {

    override var groupGenerationId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    override var isCurrent: Boolean?
        set(value) = set(1, value)
        get() = get(1) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, Boolean?> = super.fieldsRow() as Row2<Int?, Boolean?>
    override fun valuesRow(): Row2<Int?, Boolean?> = super.valuesRow() as Row2<Int?, Boolean?>
    override fun field1(): Field<Int?> = GroupGenerationTable.GROUP_GENERATION.GROUP_GENERATION_ID
    override fun field2(): Field<Boolean?> = GroupGenerationTable.GROUP_GENERATION.IS_CURRENT
    override fun component1(): Int? = groupGenerationId
    override fun component2(): Boolean? = isCurrent
    override fun value1(): Int? = groupGenerationId
    override fun value2(): Boolean? = isCurrent

    override fun value1(value: Int?): GroupGenerationRecord {
        this.groupGenerationId = value
        return this
    }

    override fun value2(value: Boolean?): GroupGenerationRecord {
        this.isCurrent = value
        return this
    }

    override fun values(value1: Int?, value2: Boolean?): GroupGenerationRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IGroupGeneration) {
        groupGenerationId = from.groupGenerationId
        isCurrent = from.isCurrent
    }

    override fun <E : IGroupGeneration> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised GroupGenerationRecord
     */
    constructor(groupGenerationId: Int? = null, isCurrent: Boolean? = null): this() {
        this.groupGenerationId = groupGenerationId
        this.isCurrent = isCurrent
    }
}
