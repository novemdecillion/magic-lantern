/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.records


import io.github.novemdecillion.adapter.jooq.tables.NoticeTable
import io.github.novemdecillion.adapter.jooq.tables.interfaces.INotice

import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class NoticeRecord() : UpdatableRecordImpl<NoticeRecord>(NoticeTable.NOTICE), Record5<UUID?, String?, LocalDate?, LocalDate?, OffsetDateTime?>, INotice {

    override var noticeId: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    override var message: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    override var startAt: LocalDate?
        set(value) = set(2, value)
        get() = get(2) as LocalDate?

    override var endAt: LocalDate?
        set(value) = set(3, value)
        get() = get(3) as LocalDate?

    override var updateAt: OffsetDateTime?
        set(value) = set(4, value)
        get() = get(4) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, String?, LocalDate?, LocalDate?, OffsetDateTime?> = super.fieldsRow() as Row5<UUID?, String?, LocalDate?, LocalDate?, OffsetDateTime?>
    override fun valuesRow(): Row5<UUID?, String?, LocalDate?, LocalDate?, OffsetDateTime?> = super.valuesRow() as Row5<UUID?, String?, LocalDate?, LocalDate?, OffsetDateTime?>
    override fun field1(): Field<UUID?> = NoticeTable.NOTICE.NOTICE_ID
    override fun field2(): Field<String?> = NoticeTable.NOTICE.MESSAGE
    override fun field3(): Field<LocalDate?> = NoticeTable.NOTICE.START_AT
    override fun field4(): Field<LocalDate?> = NoticeTable.NOTICE.END_AT
    override fun field5(): Field<OffsetDateTime?> = NoticeTable.NOTICE.UPDATE_AT
    override fun component1(): UUID? = noticeId
    override fun component2(): String? = message
    override fun component3(): LocalDate? = startAt
    override fun component4(): LocalDate? = endAt
    override fun component5(): OffsetDateTime? = updateAt
    override fun value1(): UUID? = noticeId
    override fun value2(): String? = message
    override fun value3(): LocalDate? = startAt
    override fun value4(): LocalDate? = endAt
    override fun value5(): OffsetDateTime? = updateAt

    override fun value1(value: UUID?): NoticeRecord {
        this.noticeId = value
        return this
    }

    override fun value2(value: String?): NoticeRecord {
        this.message = value
        return this
    }

    override fun value3(value: LocalDate?): NoticeRecord {
        this.startAt = value
        return this
    }

    override fun value4(value: LocalDate?): NoticeRecord {
        this.endAt = value
        return this
    }

    override fun value5(value: OffsetDateTime?): NoticeRecord {
        this.updateAt = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: LocalDate?, value4: LocalDate?, value5: OffsetDateTime?): NoticeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: INotice) {
        noticeId = from.noticeId
        message = from.message
        startAt = from.startAt
        endAt = from.endAt
        updateAt = from.updateAt
    }

    override fun <E : INotice> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised NoticeRecord
     */
    constructor(noticeId: UUID? = null, message: String? = null, startAt: LocalDate? = null, endAt: LocalDate? = null, updateAt: OffsetDateTime? = null): this() {
        this.noticeId = noticeId
        this.message = message
        this.startAt = startAt
        this.endAt = endAt
        this.updateAt = updateAt
    }
}
