fragment groupCore on GroupCore {
  groupId
  groupName
}

fragment group on Group {
  groupId
  groupGenerationId
  groupName
  parentGroupId
  path {
    ...groupCore
  }
}

fragment groupWithMemberCount on Group {
  ...group
  memberCount
}

fragment groupGeneration on GroupGeneration {
  groupGenerationId
  isCurrent
}

query group($groupId: ID!) {
  group(groupId: $groupId) {
    ...group
  }
}

query authoritativeGroups($role: Role!) {
  authoritativeGroupsByUser(role: $role) {
    ...group
  }
}

query effectiveGroups($role: Role!) {
  effectiveGroupsByUser(role: $role) {
    ...groupWithMemberCount
  }
}

query nextGenerationGroups {
  currentAndNextGroupGenerations {
    ...groupGeneration
  }
  nextGenerationGroups {
    ...group
  }
}

query exportGroupGeneration($groupGenerationId: Int) {
  exportGroupGeneration(groupGenerationId: $groupGenerationId)
}

mutation importGroupGeneration($command: ImportGroupGenerationCommand!) {
  importGroupGeneration(command: $command) {
    warnings
  }
}

mutation addGroup($command: AddGroupCommand!) {
  addGroup(command: $command)
}

mutation updateGroup($command: UpdateGroupCommand!) {
  updateGroup(command: $command)
}

mutation deleteGroup($command: DeleteGroupCommand!) {
  deleteGroup(command: $command)
}

mutation addGroupMember($command: GroupMemberCommand!) {
  addGroupMember(command: $command)
}

mutation updateGroupMember($command: GroupMemberCommand!) {
  updateGroupMember(command: $command)
}

mutation deleteGroupMember($command: DeleteGroupMemberCommand!) {
  deleteGroupMember(command: $command)
}

query currentAndNextGeneration {
  currentAndNextGroupGenerations {
    ...groupGeneration
  }
}

mutation switchGroupGeneration($commoand: SwitchGroupGenerationCommand!) {
  switchGroupGeneration(command: $commoand)
}

fragment lesson on Lesson {
  lessonId
  groupId
  slideId
  group {
    ...group
  }
  slide {
    ...slide
  }
}

fragment lessonWithStatistics on Lesson {
  ...lesson
  studentCount
  statistics {
    onGoingCount
    passCount
    failCount
    excludedCount
  }
}


query manageableLessons {
  manageableLessons {
    ...lessonWithStatistics
  }
}

query prepareAddLesson {
  manageableLessons {
    lessonId
    groupId
    slideId
  }
  authoritativeGroupsByUser(role: LESSON) {
    ...group
  }
  slides {
    ...slide
  }
}

mutation addLesson($command: AddLessonCommand!) {
  addLesson(command: $command)
}

mutation deleteLesson($lessonId: ID!) {
  deleteLesson(lessonId: $lessonId)
}

query lessonStudies($lessonId: ID!) {
  lessonStudies(lessonId: $lessonId) {
    ...study
  }
}
