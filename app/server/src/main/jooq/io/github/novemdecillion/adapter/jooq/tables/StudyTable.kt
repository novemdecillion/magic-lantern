/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables


import io.github.novemdecillion.adapter.jooq.DefaultSchema
import io.github.novemdecillion.adapter.jooq.keys.STUDY_ACCOUNT_ID_SLIDE_ID_KEY
import io.github.novemdecillion.adapter.jooq.keys.STUDY_PKEY
import io.github.novemdecillion.adapter.jooq.keys.STUDY__STUDY_ACCOUNT_ID_FKEY
import io.github.novemdecillion.adapter.jooq.tables.records.StudyRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StudyTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StudyRecord>?,
    aliased: Table<StudyRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StudyRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>study</code>
         */
        val STUDY = StudyTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StudyRecord> = StudyRecord::class.java

    /**
     * The column <code>study.study_id</code>.
     */
    val STUDY_ID: TableField<StudyRecord, UUID?> = createField(DSL.name("study_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>study.account_id</code>.
     */
    val ACCOUNT_ID: TableField<StudyRecord, UUID?> = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>study.slide_id</code>.
     */
    val SLIDE_ID: TableField<StudyRecord, String?> = createField(DSL.name("slide_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>study.progress</code>.
     */
    val PROGRESS: TableField<StudyRecord, String?> = createField(DSL.name("progress"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>study.progress_rate</code>.
     */
    val PROGRESS_RATE: TableField<StudyRecord, Int?> = createField(DSL.name("progress_rate"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>study.answer</code>.
     */
    val ANSWER: TableField<StudyRecord, String?> = createField(DSL.name("answer"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>study.score</code>.
     */
    val SCORE: TableField<StudyRecord, Int?> = createField(DSL.name("score"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>study.start_at</code>.
     */
    val START_AT: TableField<StudyRecord, OffsetDateTime?> = createField(DSL.name("start_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>study.end_at</code>.
     */
    val END_AT: TableField<StudyRecord, OffsetDateTime?> = createField(DSL.name("end_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<StudyRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StudyRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>study</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>study</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>study</code> table reference
     */
    constructor(): this(DSL.name("study"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StudyRecord>): this(Internal.createPathAlias(child, key), child, key, STUDY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<StudyRecord> = STUDY_PKEY
    override fun getKeys(): List<UniqueKey<StudyRecord>> = listOf(STUDY_PKEY, STUDY_ACCOUNT_ID_SLIDE_ID_KEY)
    override fun getReferences(): List<ForeignKey<StudyRecord, *>> = listOf(STUDY__STUDY_ACCOUNT_ID_FKEY)

    private lateinit var _account: AccountTable
    fun account(): AccountTable {
        if (!this::_account.isInitialized)
            _account = AccountTable(this, STUDY__STUDY_ACCOUNT_ID_FKEY)

        return _account;
    }
    override fun `as`(alias: String): StudyTable = StudyTable(DSL.name(alias), this)
    override fun `as`(alias: Name): StudyTable = StudyTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): StudyTable = StudyTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): StudyTable = StudyTable(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<UUID?, UUID?, String?, String?, Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row9<UUID?, UUID?, String?, String?, Int?, String?, Int?, OffsetDateTime?, OffsetDateTime?>
}
