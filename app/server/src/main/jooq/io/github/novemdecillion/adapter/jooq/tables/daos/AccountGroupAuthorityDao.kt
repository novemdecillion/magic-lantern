/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.AccountGroupAuthorityTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.AccountGroupAuthorityEntity
import io.github.novemdecillion.adapter.jooq.tables.records.AccountGroupAuthorityRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.jooq.Record3
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountGroupAuthorityDao(configuration: Configuration?) : DAOImpl<AccountGroupAuthorityRecord, AccountGroupAuthorityEntity, Record3<UUID?, UUID?, Int?>>(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY, AccountGroupAuthorityEntity::class.java, configuration) {

    /**
     * Create a new AccountGroupAuthorityDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: AccountGroupAuthorityEntity): Record3<UUID?, UUID?, Int?>? = compositeKeyRecord(o.accountId, o.groupTransitionId, o.groupGenerationId)

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAccountIdTable(lowerInclusive: UUID?, upperInclusive: UUID?): List<AccountGroupAuthorityEntity> = fetchRange(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.ACCOUNT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    fun fetchByAccountIdTable(vararg values: UUID): List<AccountGroupAuthorityEntity> = fetch(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.ACCOUNT_ID, *values)

    /**
     * Fetch records that have <code>group_transition_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfGroupTransitionIdTable(lowerInclusive: UUID?, upperInclusive: UUID?): List<AccountGroupAuthorityEntity> = fetchRange(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.GROUP_TRANSITION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>group_transition_id IN (values)</code>
     */
    fun fetchByGroupTransitionIdTable(vararg values: UUID): List<AccountGroupAuthorityEntity> = fetch(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.GROUP_TRANSITION_ID, *values)

    /**
     * Fetch records that have <code>group_generation_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfGroupGenerationIdTable(lowerInclusive: Int?, upperInclusive: Int?): List<AccountGroupAuthorityEntity> = fetchRange(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.GROUP_GENERATION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>group_generation_id IN (values)</code>
     */
    fun fetchByGroupGenerationIdTable(vararg values: Int): List<AccountGroupAuthorityEntity> = fetch(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.GROUP_GENERATION_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfRoleTable(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<AccountGroupAuthorityEntity> = fetchRange(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.ROLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    fun fetchByRoleTable(vararg values: JSONB): List<AccountGroupAuthorityEntity> = fetch(AccountGroupAuthorityTable.ACCOUNT_GROUP_AUTHORITY.ROLE, *values)
}
