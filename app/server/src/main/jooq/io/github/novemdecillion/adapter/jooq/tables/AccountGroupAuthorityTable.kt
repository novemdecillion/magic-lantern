/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables


import io.github.novemdecillion.adapter.jooq.DefaultSchema
import io.github.novemdecillion.adapter.jooq.keys.ACCOUNT_GROUP_AUTHORITY_PKEY
import io.github.novemdecillion.adapter.jooq.keys.ACCOUNT_GROUP_AUTHORITY__ACCOUNT_GROUP_AUTHORITY_ACCOUNT_ID_FKEY
import io.github.novemdecillion.adapter.jooq.keys.ACCOUNT_GROUP_AUTHORITY__ACCOUNT_GROUP_AUTHORITY_GROUP_TRANSITION_ID_FKEY
import io.github.novemdecillion.adapter.jooq.tables.records.AccountGroupAuthorityRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountGroupAuthorityTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AccountGroupAuthorityRecord>?,
    aliased: Table<AccountGroupAuthorityRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AccountGroupAuthorityRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>account_group_authority</code>
         */
        val ACCOUNT_GROUP_AUTHORITY = AccountGroupAuthorityTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AccountGroupAuthorityRecord> = AccountGroupAuthorityRecord::class.java

    /**
     * The column <code>account_group_authority.account_id</code>.
     */
    val ACCOUNT_ID: TableField<AccountGroupAuthorityRecord, UUID?> = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>account_group_authority.group_transition_id</code>.
     */
    val GROUP_TRANSITION_ID: TableField<AccountGroupAuthorityRecord, UUID?> = createField(DSL.name("group_transition_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>account_group_authority.role</code>.
     */
    val ROLE: TableField<AccountGroupAuthorityRecord, String?> = createField(DSL.name("role"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AccountGroupAuthorityRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AccountGroupAuthorityRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>account_group_authority</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>account_group_authority</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>account_group_authority</code> table reference
     */
    constructor(): this(DSL.name("account_group_authority"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AccountGroupAuthorityRecord>): this(Internal.createPathAlias(child, key), child, key, ACCOUNT_GROUP_AUTHORITY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<AccountGroupAuthorityRecord> = ACCOUNT_GROUP_AUTHORITY_PKEY
    override fun getKeys(): List<UniqueKey<AccountGroupAuthorityRecord>> = listOf(ACCOUNT_GROUP_AUTHORITY_PKEY)
    override fun getReferences(): List<ForeignKey<AccountGroupAuthorityRecord, *>> = listOf(ACCOUNT_GROUP_AUTHORITY__ACCOUNT_GROUP_AUTHORITY_ACCOUNT_ID_FKEY, ACCOUNT_GROUP_AUTHORITY__ACCOUNT_GROUP_AUTHORITY_GROUP_TRANSITION_ID_FKEY)

    private lateinit var _account: AccountTable
    private lateinit var _groupTransition: GroupTransitionTable
    fun account(): AccountTable {
        if (!this::_account.isInitialized)
            _account = AccountTable(this, ACCOUNT_GROUP_AUTHORITY__ACCOUNT_GROUP_AUTHORITY_ACCOUNT_ID_FKEY)

        return _account;
    }
    fun groupTransition(): GroupTransitionTable {
        if (!this::_groupTransition.isInitialized)
            _groupTransition = GroupTransitionTable(this, ACCOUNT_GROUP_AUTHORITY__ACCOUNT_GROUP_AUTHORITY_GROUP_TRANSITION_ID_FKEY)

        return _groupTransition;
    }
    override fun `as`(alias: String): AccountGroupAuthorityTable = AccountGroupAuthorityTable(DSL.name(alias), this)
    override fun `as`(alias: Name): AccountGroupAuthorityTable = AccountGroupAuthorityTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AccountGroupAuthorityTable = AccountGroupAuthorityTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AccountGroupAuthorityTable = AccountGroupAuthorityTable(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<UUID?, UUID?, String?> = super.fieldsRow() as Row3<UUID?, UUID?, String?>
}
