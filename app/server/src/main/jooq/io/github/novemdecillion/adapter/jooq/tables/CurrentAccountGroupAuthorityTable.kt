/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables


import io.github.novemdecillion.adapter.jooq.DefaultSchema
import io.github.novemdecillion.adapter.jooq.tables.records.CurrentAccountGroupAuthorityRecord

import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CurrentAccountGroupAuthorityTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CurrentAccountGroupAuthorityRecord>?,
    aliased: Table<CurrentAccountGroupAuthorityRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CurrentAccountGroupAuthorityRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.materializedView()
) {
    companion object {

        /**
         * The reference instance of <code>current_account_group_authority</code>
         */
        val CURRENT_ACCOUNT_GROUP_AUTHORITY = CurrentAccountGroupAuthorityTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CurrentAccountGroupAuthorityRecord> = CurrentAccountGroupAuthorityRecord::class.java

    /**
     * The column <code>current_account_group_authority.account_id</code>.
     */
    val ACCOUNT_ID: TableField<CurrentAccountGroupAuthorityRecord, UUID?> = createField(DSL.name("account_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>current_account_group_authority.group_transition_id</code>.
     */
    val GROUP_TRANSITION_ID: TableField<CurrentAccountGroupAuthorityRecord, UUID?> = createField(DSL.name("group_transition_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>current_account_group_authority.role</code>.
     */
    val ROLE: TableField<CurrentAccountGroupAuthorityRecord, String?> = createField(DSL.name("role"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>current_account_group_authority.group_origin_id</code>.
     */
    val GROUP_ORIGIN_ID: TableField<CurrentAccountGroupAuthorityRecord, UUID?> = createField(DSL.name("group_origin_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<CurrentAccountGroupAuthorityRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CurrentAccountGroupAuthorityRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>current_account_group_authority</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>current_account_group_authority</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>current_account_group_authority</code> table reference
     */
    constructor(): this(DSL.name("current_account_group_authority"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CurrentAccountGroupAuthorityRecord>): this(Internal.createPathAlias(child, key), child, key, CURRENT_ACCOUNT_GROUP_AUTHORITY, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): CurrentAccountGroupAuthorityTable = CurrentAccountGroupAuthorityTable(DSL.name(alias), this)
    override fun `as`(alias: Name): CurrentAccountGroupAuthorityTable = CurrentAccountGroupAuthorityTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CurrentAccountGroupAuthorityTable = CurrentAccountGroupAuthorityTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CurrentAccountGroupAuthorityTable = CurrentAccountGroupAuthorityTable(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<UUID?, UUID?, String?, UUID?> = super.fieldsRow() as Row4<UUID?, UUID?, String?, UUID?>
}
