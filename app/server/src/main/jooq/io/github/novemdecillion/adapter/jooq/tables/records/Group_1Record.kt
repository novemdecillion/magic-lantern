/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.records


import io.github.novemdecillion.adapter.jooq.tables.Group_1Table
import io.github.novemdecillion.adapter.jooq.tables.interfaces.IGroup_1

import java.util.UUID

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Group_1Record() : UpdatableRecordImpl<Group_1Record>(Group_1Table.GROUP_1), Record4<UUID?, Int?, String?, UUID?>, IGroup_1 {

    override var groupTransitionId: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    override var groupGenerationId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    override var groupName: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    override var parentGroupTransitionId: UUID?
        set(value) = set(3, value)
        get() = get(3) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UUID?, Int?> = super.key() as Record2<UUID?, Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<UUID?, Int?, String?, UUID?> = super.fieldsRow() as Row4<UUID?, Int?, String?, UUID?>
    override fun valuesRow(): Row4<UUID?, Int?, String?, UUID?> = super.valuesRow() as Row4<UUID?, Int?, String?, UUID?>
    override fun field1(): Field<UUID?> = Group_1Table.GROUP_1.GROUP_TRANSITION_ID
    override fun field2(): Field<Int?> = Group_1Table.GROUP_1.GROUP_GENERATION_ID
    override fun field3(): Field<String?> = Group_1Table.GROUP_1.GROUP_NAME
    override fun field4(): Field<UUID?> = Group_1Table.GROUP_1.PARENT_GROUP_TRANSITION_ID
    override fun component1(): UUID? = groupTransitionId
    override fun component2(): Int? = groupGenerationId
    override fun component3(): String? = groupName
    override fun component4(): UUID? = parentGroupTransitionId
    override fun value1(): UUID? = groupTransitionId
    override fun value2(): Int? = groupGenerationId
    override fun value3(): String? = groupName
    override fun value4(): UUID? = parentGroupTransitionId

    override fun value1(value: UUID?): Group_1Record {
        this.groupTransitionId = value
        return this
    }

    override fun value2(value: Int?): Group_1Record {
        this.groupGenerationId = value
        return this
    }

    override fun value3(value: String?): Group_1Record {
        this.groupName = value
        return this
    }

    override fun value4(value: UUID?): Group_1Record {
        this.parentGroupTransitionId = value
        return this
    }

    override fun values(value1: UUID?, value2: Int?, value3: String?, value4: UUID?): Group_1Record {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IGroup_1) {
        groupTransitionId = from.groupTransitionId
        groupGenerationId = from.groupGenerationId
        groupName = from.groupName
        parentGroupTransitionId = from.parentGroupTransitionId
    }

    override fun <E : IGroup_1> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised Group_1Record
     */
    constructor(groupTransitionId: UUID? = null, groupGenerationId: Int? = null, groupName: String? = null, parentGroupTransitionId: UUID? = null): this() {
        this.groupTransitionId = groupTransitionId
        this.groupGenerationId = groupGenerationId
        this.groupName = groupName
        this.parentGroupTransitionId = parentGroupTransitionId
    }
}
