/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.AccountTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.AccountEntity
import io.github.novemdecillion.adapter.jooq.tables.records.AccountRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountDao(configuration: Configuration?) : DAOImpl<AccountRecord, AccountEntity, UUID>(AccountTable.ACCOUNT, AccountEntity::class.java, configuration) {

    /**
     * Create a new AccountDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: AccountEntity): UUID? = o.accountId

    /**
     * Fetch records that have <code>account_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAccountIdTable(lowerInclusive: UUID?, upperInclusive: UUID?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.ACCOUNT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>account_id IN (values)</code>
     */
    fun fetchByAccountIdTable(vararg values: UUID): List<AccountEntity> = fetch(AccountTable.ACCOUNT.ACCOUNT_ID, *values)

    /**
     * Fetch a unique record that has <code>account_id = value</code>
     */
    fun fetchOneByAccountIdTable(value: UUID): AccountEntity? = fetchOne(AccountTable.ACCOUNT.ACCOUNT_ID, value)

    /**
     * Fetch records that have <code>account_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfAccountNameTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.ACCOUNT_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>account_name IN (values)</code>
     */
    fun fetchByAccountNameTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.ACCOUNT_NAME, *values)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfPasswordTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByPasswordTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.PASSWORD, *values)

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUserNameTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.USER_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    fun fetchByUserNameTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.USER_NAME, *values)

    /**
     * Fetch records that have <code>given_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfGivenNameTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.GIVEN_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>given_name IN (values)</code>
     */
    fun fetchByGivenNameTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.GIVEN_NAME, *values)

    /**
     * Fetch records that have <code>family_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfFamilyNameTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.FAMILY_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>family_name IN (values)</code>
     */
    fun fetchByFamilyNameTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.FAMILY_NAME, *values)

    /**
     * Fetch records that have <code>eastern BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfEasternTable(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.EASTERN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>eastern IN (values)</code>
     */
    fun fetchByEasternTable(vararg values: Boolean): List<AccountEntity> = fetch(AccountTable.ACCOUNT.EASTERN, *values.toTypedArray())

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfEmailTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmailTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.EMAIL, *values)

    /**
     * Fetch records that have <code>realm BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfRealmTable(lowerInclusive: String?, upperInclusive: String?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.REALM, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>realm IN (values)</code>
     */
    fun fetchByRealmTable(vararg values: String): List<AccountEntity> = fetch(AccountTable.ACCOUNT.REALM, *values)

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfEnabledTable(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<AccountEntity> = fetchRange(AccountTable.ACCOUNT.ENABLED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    fun fetchByEnabledTable(vararg values: Boolean): List<AccountEntity> = fetch(AccountTable.ACCOUNT.ENABLED, *values.toTypedArray())
}
