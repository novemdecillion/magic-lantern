/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.records


import io.github.novemdecillion.adapter.jooq.tables.RealmTable
import io.github.novemdecillion.adapter.jooq.tables.interfaces.IRealm

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RealmRecord() : UpdatableRecordImpl<RealmRecord>(RealmTable.REALM), Record4<String?, String?, Boolean?, LocalDateTime?>, IRealm {

    override var realmId: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    override var realmName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    override var enabled: Boolean?
        set(value) = set(2, value)
        get() = get(2) as Boolean?

    override var syncAt: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, Boolean?, LocalDateTime?> = super.fieldsRow() as Row4<String?, String?, Boolean?, LocalDateTime?>
    override fun valuesRow(): Row4<String?, String?, Boolean?, LocalDateTime?> = super.valuesRow() as Row4<String?, String?, Boolean?, LocalDateTime?>
    override fun field1(): Field<String?> = RealmTable.REALM.REALM_ID
    override fun field2(): Field<String?> = RealmTable.REALM.REALM_NAME
    override fun field3(): Field<Boolean?> = RealmTable.REALM.ENABLED
    override fun field4(): Field<LocalDateTime?> = RealmTable.REALM.SYNC_AT
    override fun component1(): String? = realmId
    override fun component2(): String? = realmName
    override fun component3(): Boolean? = enabled
    override fun component4(): LocalDateTime? = syncAt
    override fun value1(): String? = realmId
    override fun value2(): String? = realmName
    override fun value3(): Boolean? = enabled
    override fun value4(): LocalDateTime? = syncAt

    override fun value1(value: String?): RealmRecord {
        this.realmId = value
        return this
    }

    override fun value2(value: String?): RealmRecord {
        this.realmName = value
        return this
    }

    override fun value3(value: Boolean?): RealmRecord {
        this.enabled = value
        return this
    }

    override fun value4(value: LocalDateTime?): RealmRecord {
        this.syncAt = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Boolean?, value4: LocalDateTime?): RealmRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IRealm) {
        realmId = from.realmId
        realmName = from.realmName
        enabled = from.enabled
        syncAt = from.syncAt
    }

    override fun <E : IRealm> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised RealmRecord
     */
    constructor(realmId: String? = null, realmName: String? = null, enabled: Boolean? = null, syncAt: LocalDateTime? = null): this() {
        this.realmId = realmId
        this.realmName = realmName
        this.enabled = enabled
        this.syncAt = syncAt
    }
}
