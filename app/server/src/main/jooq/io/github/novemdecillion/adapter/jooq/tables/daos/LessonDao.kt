/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.LessonTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.LessonEntity
import io.github.novemdecillion.adapter.jooq.tables.records.LessonRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class LessonDao(configuration: Configuration?) : DAOImpl<LessonRecord, LessonEntity, UUID>(LessonTable.LESSON, LessonEntity::class.java, configuration) {

    /**
     * Create a new LessonDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: LessonEntity): UUID? = o.lessonId

    /**
     * Fetch records that have <code>lesson_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfLessonIdTable(lowerInclusive: UUID?, upperInclusive: UUID?): List<LessonEntity> = fetchRange(LessonTable.LESSON.LESSON_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lesson_id IN (values)</code>
     */
    fun fetchByLessonIdTable(vararg values: UUID): List<LessonEntity> = fetch(LessonTable.LESSON.LESSON_ID, *values)

    /**
     * Fetch a unique record that has <code>lesson_id = value</code>
     */
    fun fetchOneByLessonIdTable(value: UUID): LessonEntity? = fetchOne(LessonTable.LESSON.LESSON_ID, value)

    /**
     * Fetch records that have <code>group_origin_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfGroupOriginIdTable(lowerInclusive: UUID?, upperInclusive: UUID?): List<LessonEntity> = fetchRange(LessonTable.LESSON.GROUP_ORIGIN_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>group_origin_id IN (values)</code>
     */
    fun fetchByGroupOriginIdTable(vararg values: UUID): List<LessonEntity> = fetch(LessonTable.LESSON.GROUP_ORIGIN_ID, *values)

    /**
     * Fetch records that have <code>slide_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSlideIdTable(lowerInclusive: String?, upperInclusive: String?): List<LessonEntity> = fetchRange(LessonTable.LESSON.SLIDE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>slide_id IN (values)</code>
     */
    fun fetchBySlideIdTable(vararg values: String): List<LessonEntity> = fetch(LessonTable.LESSON.SLIDE_ID, *values)
}
