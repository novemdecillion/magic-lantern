/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.records


import io.github.novemdecillion.adapter.jooq.tables.GroupGenerationPeriodTable
import io.github.novemdecillion.adapter.jooq.tables.interfaces.IGroupGenerationPeriod

import java.time.LocalDate
import java.util.UUID

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupGenerationPeriodRecord() : TableRecordImpl<GroupGenerationPeriodRecord>(GroupGenerationPeriodTable.GROUP_GENERATION_PERIOD), Record3<UUID?, LocalDate?, LocalDate?>, IGroupGenerationPeriod {

    override var groupGenerationId: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    override var startDate: LocalDate?
        set(value) = set(1, value)
        get() = get(1) as LocalDate?

    override var endDate: LocalDate?
        set(value) = set(2, value)
        get() = get(2) as LocalDate?

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, LocalDate?, LocalDate?> = super.fieldsRow() as Row3<UUID?, LocalDate?, LocalDate?>
    override fun valuesRow(): Row3<UUID?, LocalDate?, LocalDate?> = super.valuesRow() as Row3<UUID?, LocalDate?, LocalDate?>
    override fun field1(): Field<UUID?> = GroupGenerationPeriodTable.GROUP_GENERATION_PERIOD.GROUP_GENERATION_ID
    override fun field2(): Field<LocalDate?> = GroupGenerationPeriodTable.GROUP_GENERATION_PERIOD.START_DATE
    override fun field3(): Field<LocalDate?> = GroupGenerationPeriodTable.GROUP_GENERATION_PERIOD.END_DATE
    override fun component1(): UUID? = groupGenerationId
    override fun component2(): LocalDate? = startDate
    override fun component3(): LocalDate? = endDate
    override fun value1(): UUID? = groupGenerationId
    override fun value2(): LocalDate? = startDate
    override fun value3(): LocalDate? = endDate

    override fun value1(value: UUID?): GroupGenerationPeriodRecord {
        this.groupGenerationId = value
        return this
    }

    override fun value2(value: LocalDate?): GroupGenerationPeriodRecord {
        this.startDate = value
        return this
    }

    override fun value3(value: LocalDate?): GroupGenerationPeriodRecord {
        this.endDate = value
        return this
    }

    override fun values(value1: UUID?, value2: LocalDate?, value3: LocalDate?): GroupGenerationPeriodRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IGroupGenerationPeriod) {
        groupGenerationId = from.groupGenerationId
        startDate = from.startDate
        endDate = from.endDate
    }

    override fun <E : IGroupGenerationPeriod> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised GroupGenerationPeriodRecord
     */
    constructor(groupGenerationId: UUID? = null, startDate: LocalDate? = null, endDate: LocalDate? = null): this() {
        this.groupGenerationId = groupGenerationId
        this.startDate = startDate
        this.endDate = endDate
    }
}
