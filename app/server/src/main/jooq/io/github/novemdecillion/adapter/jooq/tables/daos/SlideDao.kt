/*
 * This file is generated by jOOQ.
 */
package io.github.novemdecillion.adapter.jooq.tables.daos


import io.github.novemdecillion.adapter.jooq.tables.SlideTable
import io.github.novemdecillion.adapter.jooq.tables.pojos.SlideEntity
import io.github.novemdecillion.adapter.jooq.tables.records.SlideRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SlideDao(configuration: Configuration?) : DAOImpl<SlideRecord, SlideEntity, String>(SlideTable.SLIDE, SlideEntity::class.java, configuration) {

    /**
     * Create a new SlideDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: SlideEntity): String? = o.slideId

    /**
     * Fetch records that have <code>slide_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSlideIdTable(lowerInclusive: String?, upperInclusive: String?): List<SlideEntity> = fetchRange(SlideTable.SLIDE.SLIDE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>slide_id IN (values)</code>
     */
    fun fetchBySlideIdTable(vararg values: String): List<SlideEntity> = fetch(SlideTable.SLIDE.SLIDE_ID, *values)

    /**
     * Fetch a unique record that has <code>slide_id = value</code>
     */
    fun fetchOneBySlideIdTable(value: String): SlideEntity? = fetchOne(SlideTable.SLIDE.SLIDE_ID, value)
}
